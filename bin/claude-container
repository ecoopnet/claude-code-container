#!/bin/bash

# Get the project root directory (parent of bin directory)
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || realpath "${BASH_SOURCE[0]}" 2>/dev/null || echo "${BASH_SOURCE[0]}")")/.." && pwd)"

# Check if script is executed via symlink and show hint
show_symlink_hint() {
    if [ ! -L "$0" ]; then
        local script_name=$(basename "$0")
        if [ "$LANG_CODE" = "ja" ]; then
            echo "💡 ヒント: このスクリプトをシンボリックリンクで$PATHに追加すると、どこからでも実行できて便利です:"
            echo "   sudo ln -s \"$(readlink -f "$0")\" /usr/local/bin/$script_name"
            echo "   または、お好みの場所に:"
            echo "   ln -s \"$(readlink -f "$0")\" ~/.local/bin/$script_name"
            echo ""
        else
            echo "💡 Hint: Adding this script to your PATH via symlink makes it convenient to run from anywhere:"
            echo "   sudo ln -s \"$(readlink -f "$0")\" /usr/local/bin/$script_name"
            echo "   Or to your preferred location:"
            echo "   ln -s \"$(readlink -f "$0")\" ~/.local/bin/$script_name"
            echo ""
        fi
    fi
}

# Detect language setting early for error messages
detect_language() {
    if [[ "$LANG" =~ ^ja ]]; then
        echo "ja"
    else
        echo "en"
    fi
}

LANG_CODE=$(detect_language)

# Detect container runtime
detect_container_runtime() {
    # Check if running on macOS and container command is available
    if [[ "$OSTYPE" == "darwin"* ]] && command -v container >/dev/null 2>&1; then
        echo "container"
    elif command -v docker >/dev/null 2>&1; then
        echo "docker"
    else
        if [ "$LANG_CODE" = "ja" ]; then
            echo "エラー: DockerまたはContainer runtimeが見つかりません" >&2
        else
            echo "Error: Docker or Container runtime not found" >&2
        fi
        exit 1
    fi
}

# Set container runtime command (can be overridden via environment variable)
CONTAINER_CMD="${CONTAINER_RUNTIME:-$(detect_container_runtime)}"

# Detect local timezone
detect_timezone() {
    # Use TZ environment variable if set
    if [ -n "$TZ" ]; then
        echo "$TZ"
        return
    fi
    
    # Windows (Git Bash/MSYS2) environment
    if [ -n "$MSYSTEM" ] || [ -n "$MINGW_PREFIX" ]; then
        # Get Windows timezone information
        if command -v tzutil.exe >/dev/null 2>&1; then
            local win_tz=$(tzutil.exe /g 2>/dev/null | tr -d '\r')
            # Convert Windows timezone to IANA timezone (major ones only)
            case "$win_tz" in
                "Pacific Standard Time") echo "America/Los_Angeles" ;;
                "Mountain Standard Time") echo "America/Denver" ;;
                "Central Standard Time") echo "America/Chicago" ;;
                "Eastern Standard Time") echo "America/New_York" ;;
                "GMT Standard Time") echo "Europe/London" ;;
                "Central Europe Standard Time") echo "Europe/Berlin" ;;
                "Tokyo Standard Time") echo "Asia/Tokyo" ;;
                "China Standard Time") echo "Asia/Shanghai" ;;
                "India Standard Time") echo "Asia/Kolkata" ;;
                "AUS Eastern Standard Time") echo "Australia/Sydney" ;;
                *) echo "UTC" ;;
            esac
            return
        fi
    fi
    
    # WSL environment
    if grep -qi microsoft /proc/version 2>/dev/null; then
        # WSL uses the same detection method as Linux
        if [ -f /etc/timezone ]; then
            local tz=$(cat /etc/timezone 2>/dev/null)
            if [ -n "$tz" ]; then
                echo "$tz"
                return
            fi
        fi
    fi
    
    # macOS environment
    if [ -f /etc/localtime ] && [ -L /etc/localtime ]; then
        local tz=$(readlink /etc/localtime | sed 's|/var/db/timezone/zoneinfo/||' 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Linux environment (timedatectl)
    if command -v timedatectl >/dev/null 2>&1; then
        local tz=$(timedatectl show --property=Timezone --value 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Linux environment (/etc/localtime)
    if [ -f /etc/localtime ] && [ -L /etc/localtime ]; then
        local tz=$(readlink /etc/localtime | sed 's|/usr/share/zoneinfo/||' 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Get from /etc/timezone file
    if [ -f /etc/timezone ]; then
        local tz=$(cat /etc/timezone 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Default to UTC
    echo "UTC"
}

# Detect timezone
LOCAL_TZ=$(detect_timezone)

# Parse arguments
WORKSPACE_PATH=""
CLAUDE_ARGS=""
REBUILD_CONTAINER=false
REMOVE_CONTAINER=false

# Parse our own options first
while [[ $# -gt 0 ]]; do
    case $1 in
        --rebuild-container)
            REBUILD_CONTAINER=true
            shift
            ;;
        --remove-container)
            REMOVE_CONTAINER=true
            shift
            ;;
        --)
            shift
            CLAUDE_ARGS="$@"
            break
            ;;
        *)
            # If it's a directory or ".", treat as workspace
            if [ -z "$WORKSPACE_PATH" ] && ([ -d "$1" ] || [ "$1" = "." ]); then
                WORKSPACE_PATH=$(realpath "$1")
                shift
            else
                # All remaining arguments go to Claude
                CLAUDE_ARGS="$@"
                break
            fi
            ;;
    esac
done

# If no workspace specified, use current directory
if [ -z "$WORKSPACE_PATH" ]; then
    WORKSPACE_PATH=$(pwd)
fi

# Function to display usage information
show_usage() {
    if [ "$LANG_CODE" = "ja" ]; then
        echo "使用方法: claude-container [オプション] [ワークスペース] [-- claudeオプション...]"
        echo ""
        echo "オプション:"
        echo "   --rebuild-container                                  # コンテナイメージを再ビルド"
        echo "   --remove-container                                   # コンテナイメージを削除"
        echo ""
        echo "基本的な使用例:"
        echo "   claude-container                                     # カレントディレクトリを使用"
        echo "   claude-container .                                   # カレントディレクトリを明示"
        echo "   claude-container /path/to/project                    # 指定ディレクトリを使用"
        echo ""
        echo "Claudeオプション付きの使用例:"
        echo "   claude-container -- --model claude-3-opus-20240229  # カレントディレクトリ + claudeオプション"
        echo "   claude-container . -- --verbose                     # カレントディレクトリ + claudeオプション"
        echo "   claude-container /path -- --model claude-3-opus     # 指定ディレクトリ + claudeオプション"
        echo "   claude-container --help                             # claudeのヘルプを表示"
        echo ""
        echo "コンテナ管理の例:"
        echo "   claude-container --rebuild-container                # イメージを再ビルド"
        echo "   claude-container --remove-container                 # イメージを削除"
    else
        echo "Usage: claude-container [options] [workspace] [-- claude-options...]"
        echo ""
        echo "Options:"
        echo "   --rebuild-container                                  # Rebuild container image"
        echo "   --remove-container                                   # Remove container image"
        echo ""
        echo "Basic usage examples:"
        echo "   claude-container                                     # Use current directory"
        echo "   claude-container .                                   # Use current directory explicitly"
        echo "   claude-container /path/to/project                    # Use specified directory"
        echo ""
        echo "Usage with Claude options:"
        echo "   claude-container -- --model claude-3-opus-20240229  # Current directory + Claude options"
        echo "   claude-container . -- --verbose                     # Current directory + Claude options"
        echo "   claude-container /path -- --model claude-3-opus     # Specified directory + Claude options"
        echo "   claude-container --help                             # Show Claude help"
        echo ""
        echo "Container management examples:"
        echo "   claude-container --rebuild-container                # Rebuild image"
        echo "   claude-container --remove-container                 # Remove image"
    fi
}

if [ ! -d "$WORKSPACE_PATH" ]; then
    if [ "$LANG_CODE" = "ja" ]; then
        echo "エラー: ディレクトリが存在しません: $WORKSPACE_PATH"
    else
        echo "Error: Directory does not exist: $WORKSPACE_PATH"
    fi
    echo ""
    show_usage
    exit 1
fi

# Check if the workspace path is actually accessible
if [ ! -r "$WORKSPACE_PATH" ]; then
    if [ "$LANG_CODE" = "ja" ]; then
        echo "エラー: ディレクトリにアクセスできません: $WORKSPACE_PATH"
        echo "権限を確認してください。"
    else
        echo "Error: Cannot access directory: $WORKSPACE_PATH"
        echo "Please check permissions."
    fi
    exit 1
fi

# Docker image name
IMAGE_NAME="claude-code"

# Function to check if image exists
image_exists() {
    $CONTAINER_CMD images --format "table {{.Repository}}:{{.Tag}}" 2>/dev/null | grep -q "^$IMAGE_NAME:latest$"
}

# Function to build container image
build_image() {
    if [ "$LANG_CODE" = "ja" ]; then
        echo "コンテナイメージをビルドしています..."
    else
        echo "Building container image..."
    fi
    
    if [ ! -f "$SCRIPT_DIR/Dockerfile" ]; then
        if [ "$LANG_CODE" = "ja" ]; then
            echo "エラー: Dockerfileが見つかりません: $SCRIPT_DIR/Dockerfile"
        else
            echo "Error: Dockerfile not found: $SCRIPT_DIR/Dockerfile"
        fi
        exit 1
    fi
    
    $CONTAINER_CMD build -t "$IMAGE_NAME" "$SCRIPT_DIR"
    if [ $? -ne 0 ]; then
        if [ "$LANG_CODE" = "ja" ]; then
            echo "エラー: コンテナイメージのビルドに失敗しました"
        else
            echo "Error: Failed to build container image"
        fi
        exit 1
    fi
    
    if [ "$LANG_CODE" = "ja" ]; then
        echo "コンテナイメージのビルドが完了しました"
    else
        echo "Container image build completed"
    fi
}

# Function to remove container image
remove_image() {
    if image_exists; then
        if [ "$LANG_CODE" = "ja" ]; then
            echo "コンテナイメージを削除しています..."
        else
            echo "Removing container image..."
        fi
        $CONTAINER_CMD rmi "$IMAGE_NAME" 2>/dev/null
        if [ "$LANG_CODE" = "ja" ]; then
            echo "コンテナイメージを削除しました"
        else
            echo "Container image removed"
        fi
    else
        if [ "$LANG_CODE" = "ja" ]; then
            echo "コンテナイメージが見つかりません: $IMAGE_NAME"
        else
            echo "Container image not found: $IMAGE_NAME"
        fi
    fi
}

# Handle container management options
if [ "$REMOVE_CONTAINER" = true ]; then
    remove_image
    exit 0
fi

if [ "$REBUILD_CONTAINER" = true ]; then
    if image_exists; then
        remove_image
    fi
    build_image
    exit 0
fi

# Check if image exists, build if not
if ! image_exists; then
    if [ "$LANG_CODE" = "ja" ]; then
        echo "コンテナイメージが見つかりません。初回ビルドを実行します..."
    else
        echo "Container image not found. Building for the first time..."
    fi
    build_image
fi

# Container name (generated from workspace path with timestamp)
TIMESTAMP=$(date +%s)
CONTAINER_NAME="claude-code-$(echo "$WORKSPACE_PATH" | sed 's/[^a-zA-Z0-9]/-/g' | tail -c 40)-$TIMESTAMP"

if [ "$LANG_CODE" = "ja" ]; then
    echo "Claude Code Container を起動しています..."
    echo "コンテナランタイム: $CONTAINER_CMD"
    echo "ワークスペース: $WORKSPACE_PATH"
    echo "コンテナ名: $CONTAINER_NAME"
    echo "タイムゾーン: $LOCAL_TZ"
else
    echo "Starting Claude Code Container..."
    echo "Container runtime: $CONTAINER_CMD"
    echo "Workspace: $WORKSPACE_PATH"
    echo "Container name: $CONTAINER_NAME"
    echo "Timezone: $LOCAL_TZ"
fi

# Show symlink hint if running directly (not via symlink)
show_symlink_hint

# Function to cleanup container on exit
cleanup_container() {
    if [ -n "$CONTAINER_NAME" ]; then
        if [ "$LANG_CODE" = "ja" ]; then
            echo "コンテナを停止しています..."
        else
            echo "Stopping container..."
        fi
        $CONTAINER_CMD stop "$CONTAINER_NAME" >/dev/null 2>&1
        $CONTAINER_CMD rm "$CONTAINER_NAME" >/dev/null 2>&1
    fi
}

# Set up signal handlers to cleanup container on interruption
trap cleanup_container EXIT
trap cleanup_container INT
trap cleanup_container TERM

# Mount entire docker folder
MOUNT_OPTIONS="-v \"$SCRIPT_DIR/docker:/home/node\""

# Execute container
eval "$CONTAINER_CMD run -it --rm \
    --name \"$CONTAINER_NAME\" \
    $MOUNT_OPTIONS \
    -v \"$WORKSPACE_PATH:/workspace\" \
    -e HOME=/home/node \
    -e TZ=\"$LOCAL_TZ\" \
    --workdir /workspace \
    \"$IMAGE_NAME\" claude $CLAUDE_ARGS"

# Cleanup after normal exit
cleanup_container
