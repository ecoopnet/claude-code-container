#!/bin/bash

# スクリプトのあるディレクトリを取得
SCRIPT_DIR="/opt/ai-agents/claude-code-container"

# ローカルのタイムゾーンを検出
detect_timezone() {
    # 環境変数TZが設定されていればそれを使用
    if [ -n "$TZ" ]; then
        echo "$TZ"
        return
    fi
    
    # Windows (Git Bash/MSYS2)の場合
    if [ -n "$MSYSTEM" ] || [ -n "$MINGW_PREFIX" ]; then
        # Windowsのタイムゾーン情報を取得
        if command -v tzutil.exe >/dev/null 2>&1; then
            local win_tz=$(tzutil.exe /g 2>/dev/null | tr -d '\r')
            # Windows タイムゾーンをIANAタイムゾーンに変換（主要なものだけ）
            case "$win_tz" in
                "Pacific Standard Time") echo "America/Los_Angeles" ;;
                "Mountain Standard Time") echo "America/Denver" ;;
                "Central Standard Time") echo "America/Chicago" ;;
                "Eastern Standard Time") echo "America/New_York" ;;
                "GMT Standard Time") echo "Europe/London" ;;
                "Central Europe Standard Time") echo "Europe/Berlin" ;;
                "Tokyo Standard Time") echo "Asia/Tokyo" ;;
                "China Standard Time") echo "Asia/Shanghai" ;;
                "India Standard Time") echo "Asia/Kolkata" ;;
                "AUS Eastern Standard Time") echo "Australia/Sydney" ;;
                *) echo "UTC" ;;
            esac
            return
        fi
    fi
    
    # WSLの場合
    if grep -qi microsoft /proc/version 2>/dev/null; then
        # WSLはLinuxと同じ方法で検出
        if [ -f /etc/timezone ]; then
            local tz=$(cat /etc/timezone 2>/dev/null)
            if [ -n "$tz" ]; then
                echo "$tz"
                return
            fi
        fi
    fi
    
    # macOSの場合
    if [ -f /etc/localtime ] && [ -L /etc/localtime ]; then
        local tz=$(readlink /etc/localtime | sed 's|/var/db/timezone/zoneinfo/||' 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Linuxの場合（timedatectl）
    if command -v timedatectl >/dev/null 2>&1; then
        local tz=$(timedatectl show --property=Timezone --value 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Linuxの場合（/etc/localtime）
    if [ -f /etc/localtime ] && [ -L /etc/localtime ]; then
        local tz=$(readlink /etc/localtime | sed 's|/usr/share/zoneinfo/||' 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # /etc/timezoneファイルから取得
    if [ -f /etc/timezone ]; then
        local tz=$(cat /etc/timezone 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # デフォルトはUTC
    echo "UTC"
}

# タイムゾーンを検出
LOCAL_TZ=$(detect_timezone)

# デフォルト値
DANGEROUS_MODE=""

# オプション解析
while [[ $# -gt 0 ]]; do
    case $1 in
        -x)
            DANGEROUS_MODE="--dangerously-skip-permissions"
            shift
            ;;
        *)
            break
            ;;
    esac
done

# 引数チェック
if [ $# -eq 0 ]; then
    echo "使用方法: claude-container [-x] <workspace-path> [claude-options...]"
    echo "例: claude-container ."
    echo "例: claude-container -x /path/to/project"
    echo "例: claude-container /path/to/project --model claude-3-opus-20240229"
    echo "例: claude-container -x /path/to/project --verbose --model claude-3-opus-20240229"
    echo ""
    echo "オプション:"
    echo "  -x                  --dangerously-skip-permissionsオプションを付与"
    echo "  claude-options...   ワークスペースパスの後の引数はすべてclaudeに渡されます"
    exit 1
fi

# ワークスペースパスを絶対パスに変換
WORKSPACE_PATH=$(realpath "$1")
shift

# 残りの引数をclaudeに渡す
CLAUDE_ARGS="$@"

if [ ! -d "$WORKSPACE_PATH" ]; then
    echo "エラー: ディレクトリが存在しません: $WORKSPACE_PATH"
    exit 1
fi

# ワークスペースパスが実際にディレクトリかどうか確認
if [ ! -r "$WORKSPACE_PATH" ]; then
    echo "エラー: ディレクトリにアクセスできません: $WORKSPACE_PATH"
    exit 1
fi

# Dockerイメージ名
IMAGE_NAME="claude-code"

# コンテナ名（ワークスペースパスから生成、タイムスタンプ付き）
TIMESTAMP=$(date +%s)
CONTAINER_NAME="claude-code-$(echo "$WORKSPACE_PATH" | sed 's/[^a-zA-Z0-9]/-/g' | tail -c 40)-$TIMESTAMP"

echo "ワークスペース: $WORKSPACE_PATH"
echo "コンテナ名: $CONTAINER_NAME"
echo "タイムゾーン: $LOCAL_TZ"
# dockerフォルダを丸ごとマウント
MOUNT_OPTIONS="-v \"$SCRIPT_DIR/docker:/home/node\""


# Dockerコンテナを実行
eval "container run -it --rm \
    --name \"$CONTAINER_NAME\" \
    $MOUNT_OPTIONS \
    -v \"$WORKSPACE_PATH:/workspace\" \
    -e HOME=/home/node \
    -e TZ=\"$LOCAL_TZ\" \
    --workdir /workspace \
    \"$IMAGE_NAME\" claude $DANGEROUS_MODE $CLAUDE_ARGS"
