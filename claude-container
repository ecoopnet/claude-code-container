#!/bin/bash

# スクリプトのあるディレクトリを取得（シンボリックリンク対応）
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || realpath "${BASH_SOURCE[0]}" 2>/dev/null || echo "${BASH_SOURCE[0]}")")" && pwd)"

# ローカルのタイムゾーンを検出
detect_timezone() {
    # 環境変数TZが設定されていればそれを使用
    if [ -n "$TZ" ]; then
        echo "$TZ"
        return
    fi
    
    # Windows (Git Bash/MSYS2)の場合
    if [ -n "$MSYSTEM" ] || [ -n "$MINGW_PREFIX" ]; then
        # Windowsのタイムゾーン情報を取得
        if command -v tzutil.exe >/dev/null 2>&1; then
            local win_tz=$(tzutil.exe /g 2>/dev/null | tr -d '\r')
            # Windows タイムゾーンをIANAタイムゾーンに変換（主要なものだけ）
            case "$win_tz" in
                "Pacific Standard Time") echo "America/Los_Angeles" ;;
                "Mountain Standard Time") echo "America/Denver" ;;
                "Central Standard Time") echo "America/Chicago" ;;
                "Eastern Standard Time") echo "America/New_York" ;;
                "GMT Standard Time") echo "Europe/London" ;;
                "Central Europe Standard Time") echo "Europe/Berlin" ;;
                "Tokyo Standard Time") echo "Asia/Tokyo" ;;
                "China Standard Time") echo "Asia/Shanghai" ;;
                "India Standard Time") echo "Asia/Kolkata" ;;
                "AUS Eastern Standard Time") echo "Australia/Sydney" ;;
                *) echo "UTC" ;;
            esac
            return
        fi
    fi
    
    # WSLの場合
    if grep -qi microsoft /proc/version 2>/dev/null; then
        # WSLはLinuxと同じ方法で検出
        if [ -f /etc/timezone ]; then
            local tz=$(cat /etc/timezone 2>/dev/null)
            if [ -n "$tz" ]; then
                echo "$tz"
                return
            fi
        fi
    fi
    
    # macOSの場合
    if [ -f /etc/localtime ] && [ -L /etc/localtime ]; then
        local tz=$(readlink /etc/localtime | sed 's|/var/db/timezone/zoneinfo/||' 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Linuxの場合（timedatectl）
    if command -v timedatectl >/dev/null 2>&1; then
        local tz=$(timedatectl show --property=Timezone --value 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # Linuxの場合（/etc/localtime）
    if [ -f /etc/localtime ] && [ -L /etc/localtime ]; then
        local tz=$(readlink /etc/localtime | sed 's|/usr/share/zoneinfo/||' 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # /etc/timezoneファイルから取得
    if [ -f /etc/timezone ]; then
        local tz=$(cat /etc/timezone 2>/dev/null)
        if [ -n "$tz" ]; then
            echo "$tz"
            return
        fi
    fi
    
    # デフォルトはUTC
    echo "UTC"
}

# タイムゾーンを検出
LOCAL_TZ=$(detect_timezone)

# 引数解析
WORKSPACE_PATH=""
CLAUDE_ARGS=""

# -- の位置を探す
DOUBLE_DASH_POS=-1
for i in $(seq 1 $#); do
    if [ "${!i}" = "--" ]; then
        DOUBLE_DASH_POS=$i
        break
    fi
done

if [ $DOUBLE_DASH_POS -gt 0 ]; then
    # -- が見つかった場合
    if [ $DOUBLE_DASH_POS -eq 1 ]; then
        # 最初の引数が -- の場合、ワークスペースはカレントディレクトリ
        WORKSPACE_PATH=$(pwd)
        shift # -- を削除
        CLAUDE_ARGS="$@"
    else
        # -- より前の引数をワークスペースとして扱う（最初の1つだけ）
        WORKSPACE_PATH=$(realpath "$1")
        shift $DOUBLE_DASH_POS # -- まで削除
        CLAUDE_ARGS="$@"
    fi
else
    # -- がない場合
    if [ $# -eq 0 ]; then
        # 引数なし：カレントディレクトリを使用
        WORKSPACE_PATH=$(pwd)
        CLAUDE_ARGS=""
    elif [ -d "$1" ] || [ "$1" = "." ]; then
        # 最初の引数がディレクトリの場合
        WORKSPACE_PATH=$(realpath "$1")
        shift
        CLAUDE_ARGS="$@"
    else
        # 最初の引数がディレクトリでない場合、カレントディレクトリを使用
        WORKSPACE_PATH=$(pwd)
        CLAUDE_ARGS="$@"
    fi
fi

# 使用方法を表示する関数
show_usage() {
    echo "使用方法: claude-container [workspace] [-- claude-options...]"
    echo "例: claude-container                                    # カレントディレクトリを使用"
    echo "例: claude-container .                                  # カレントディレクトリを使用"
    echo "例: claude-container /path/to/project                   # 指定ディレクトリを使用"
    echo "例: claude-container -- --model claude-3-opus-20240229 # カレントディレクトリ + claudeオプション"
    echo "例: claude-container . -- --verbose                    # カレントディレクトリ + claudeオプション"
    echo "例: claude-container /path -- --model claude-3-opus    # 指定ディレクトリ + claudeオプション"
    echo "例: claude-container --help                            # claudeに直接渡される"
}

if [ ! -d "$WORKSPACE_PATH" ]; then
    echo "エラー: ディレクトリが存在しません: $WORKSPACE_PATH"
    exit 1
fi

# ワークスペースパスが実際にディレクトリかどうか確認
if [ ! -r "$WORKSPACE_PATH" ]; then
    echo "エラー: ディレクトリにアクセスできません: $WORKSPACE_PATH"
    exit 1
fi

# Dockerイメージ名
IMAGE_NAME="claude-code"

# コンテナ名（ワークスペースパスから生成、タイムスタンプ付き）
TIMESTAMP=$(date +%s)
CONTAINER_NAME="claude-code-$(echo "$WORKSPACE_PATH" | sed 's/[^a-zA-Z0-9]/-/g' | tail -c 40)-$TIMESTAMP"

echo "ワークスペース: $WORKSPACE_PATH"
echo "コンテナ名: $CONTAINER_NAME"
echo "タイムゾーン: $LOCAL_TZ"
# dockerフォルダを丸ごとマウント
MOUNT_OPTIONS="-v \"$SCRIPT_DIR/docker:/home/node\""


# Dockerコンテナを実行
eval "container run -it --rm \
    --name \"$CONTAINER_NAME\" \
    $MOUNT_OPTIONS \
    -v \"$WORKSPACE_PATH:/workspace\" \
    -e HOME=/home/node \
    -e TZ=\"$LOCAL_TZ\" \
    --workdir /workspace \
    \"$IMAGE_NAME\" claude $CLAUDE_ARGS"
